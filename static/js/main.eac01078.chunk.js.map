{"version":3,"sources":["serviceWorker.js","reducers.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constancts.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialStateSearch","searchField","initialStateRobots","isPending","robots","SearchBox","_ref","searchChange","react_default","a","createElement","className","aria-label","type","placeholder","onChange","Card","id","name","email","src","concat","alt","CardList","map","user","i","components_Card","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasError","inherits","createClass","value","info","setState","Component","Header","nextProps","nextState","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","Header_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","fetch","response","json","data","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eac01078.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constancts'\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload })\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    default:\n      return state;\n  }\n}\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label='Search Robots'\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"bg-light-green dib br3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robos\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              id={user.id}\n              name={user.name}\n              email={user.email}\n              key={i}\n            />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList;\n","import React from 'react'\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll\n","import React, { Component } from 'react'\n\nexport class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That is not good.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary\n","import React, { Component } from 'react'\n\nexport default class Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    return (\n      <h1 className=\"f1\">Robo friends</h1>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport { setSearchField, requestRobots } from '../actions';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { isPending, robots, searchField, onSearchChange } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n\n    return (\n        <div className=\"tc\">\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n          {isPending ? <h1>Loading</h1> : \n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          }\n          </Scroll>\n        </div>\n      )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constancts'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport App from './containers/App';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({\n  searchRobots,\n  requestRobots\n});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); \n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}